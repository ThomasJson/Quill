@using MediatR;
@using Template.Application.Features.Note.Shared.Dto;
@using Template.Application.Features.Note.Queries;
@using Template.Application.Common.Utils;

@inject IMediator Mediator

<EditForm class="flex flex-col w-full h-full" Model="@Note" OnValidSubmit="UpdateNote">

    <InputTextArea @bind-Value="@_noteText" @oninput="HandleInput" placeholder="@_noteText" class="w-full h-full p-4 text-zinc-600" spellcheck="false"></InputTextArea>

    <div class="flex flex-row w-full h-16 justify-around bg-white">

        <button class="p-2 text-zinc-600 text-xl">
            <i class="fa-regular fa-image"></i>
        </button>

        <button class="p-2 text-zinc-600 text-xl">
            <i class="fa-solid fa-list"></i>
        </button>

        <button class="p-2 text-zinc-600 text-lg">
            <i class="fa-solid fa-shirt"></i>
        </button>

        <button class="p-2 text-zinc-600 text-xl">
            <i class="fa-regular fa-square-check"></i>
        </button>

        <button class="p-2 text-zinc-600 text-lg">
            <i class="fa-solid fa-t"></i>
        </button>

        <button class="p-2 text-zinc-600 text-lg">
            <i class="fa-regular fa-folder"></i>
        </button>

        <button class="p-2 text-zinc-600 text-xl" type="submit">
            <i class="fa-solid fa-check"></i>
        </button>
    </div>

</EditForm>

@code {
    [Parameter]
    public NoteDto Note { get; set; }

    [Parameter]
    public EventCallback<bool> IsNoteUpdated { get; set; }

    [Parameter]
    public EventCallback<NoteDto> IsNoteDeleted { get; set; }

    private string _noteText;

    protected override void OnParametersSet()
    {
        _noteText = $"{Note.Title}\n{Note.Content}";
    }

    private void HandleInput(ChangeEventArgs e)
    {
        _noteText = e.Value.ToString();
        var splitIndex = _noteText.IndexOf("\n");

        if (splitIndex > -1)
        {
            Note.Title = _noteText.Substring(0, splitIndex);
            Note.Content = _noteText.Substring(splitIndex + 1);
        }
        else
        {
            Note.Title = _noteText;
            Note.Content = string.Empty;
        }
    }

    private async Task UpdateNote()
    {
        var updatedNoteDto = await Mediator.Send(new UpdateNoteQuery(new NoteDto
        {
            Id = Note.Id,
            Title = Note.Title,
            Content = Note.Content,
            UpdatedDate = DateTimeUtils.ShortToSeconds(DateTime.UtcNow)
        }));

        if (updatedNoteDto != null)
        {
            await IsNoteUpdated.InvokeAsync(true);
        }
    }

    private async Task Delete()
    {
        var deletedNote = await Mediator.Send(new DeleteNoteQuery(Note));

        if (deletedNote != null)
        {
            await IsNoteDeleted.InvokeAsync(deletedNote);
        }
    }
}