@using MediatR;
@using Template.Application.Features.Note.Shared.Dto;
@using Template.Application.Features.Note.Queries;
@using Template.Application.Common.Utils;

@inject IMediator Mediator

<EditForm class="flex flex-col w-full h-full" Model="@_note" OnValidSubmit="CreateNote">

    <InputTextArea @bind-Value="@_noteText" @oninput="HandleInput" placeholder="Title" class="w-full h-full p-4"></InputTextArea>

    <div class="flex flex-row w-full h-16 justify-around bg-white">

        <button class="p-2 text-zinc-600 text-xl">
            <i class="fa-regular fa-image"></i>
        </button>

        <button class="p-2 text-zinc-600 text-xl">
            <i class="fa-solid fa-list"></i>
        </button>

        <button class="p-2 text-zinc-600 text-lg">
            <i class="fa-solid fa-shirt"></i>
        </button>

        <button class="p-2 text-zinc-600 text-xl">
            <i class="fa-regular fa-square-check"></i>
        </button>

        <button class="p-2 text-zinc-600 text-lg">
            <i class="fa-solid fa-t"></i>
        </button>

        <button class="p-2 text-zinc-600 text-lg">
            <i class="fa-regular fa-folder"></i>
        </button>

        <button class="p-2 text-zinc-600 text-xl" type="submit">
            <i class="fa-solid fa-check"></i>
        </button>
        
    </div>

</EditForm>

@code {

    [Parameter]
    public EventCallback<NoteDto> IsNoteCreated { get; set; }

    private string _noteText;
    private NoteDto _note = new();

    private void HandleInput(ChangeEventArgs e)
    {
        _noteText = e.Value.ToString();
        var splitIndex = _noteText.IndexOf("\n");

        if (splitIndex > -1)
        {
            _note.Title = _noteText.Substring(0, splitIndex);
            _note.Content = _noteText.Substring(splitIndex + 1);
        }
        else
        {
            _note.Title = _noteText;
            _note.Content = string.Empty;
        }
    }

    private async Task CreateNote()
    {
        var createdNoteDto = await Mediator.Send(new CreateNoteQuery(new NoteDto
        {
            Title = _note.Title,
            Content = _note.Content,
            CreatedDate = DateTimeUtils.ShortToSeconds(DateTime.UtcNow)
        }));

        if (createdNoteDto != null)
        {
            await IsNoteCreated.InvokeAsync(createdNoteDto);
            _noteText = string.Empty;
        }
    }
}